// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.3.21'
    ext {
        dokkaVersion = '0.9.17'
    }
    ext.kotlin_version = '1.3.20'
    ext.kotlin_version = '1.3.0'
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.3.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-android-gradle-plugin:$dokkaVersion"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

def getRevision() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--long', '--tag', '--always', '--dirty', '--abbrev=8'
        standardOutput = stdout
    }
    return stdout.toString().trim().replaceAll('v', '')
}

def getTag() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--abbrev=0'
        standardOutput = stdout
    }
    return stdout.toString().trim().replaceAll('v', '')
}

def getRevisionMajor() {
    def tag = getTag()
    def (value1, value2) = tag.tokenize('.')
    return value1
}

def getRevisionMinor() {
    def tag = getTag()
    def (value1, value2) = tag.tokenize('.')
    return value2
}

def getRevisionBuild() {
    def stdout = getRevision()
    def tag = stdout.toString().trim()
    def (value1, value2, value3) = tag.tokenize('-')
    return value2
}


task clean(type: Delete) {
    delete rootProject.buildDir
}
